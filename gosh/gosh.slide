# gosh
Go at the command line
10 Feb 2023

Nick Wells
@nickgwells
https://github.com/nickwells

// ==========================================================================
## Why write Go at the command line?

An example from real life

: a large system
:
: tens of programs;
: 1000+ instances;
: 100's of hosts in multiple datacentres;
: several million lines of code.
:
: ... and gigabytes of logs
:
: Sometimes we would need to answer questions about the system

// ==========================================================================
## Finding and investigating problems

You start out by scrolling through the log files

Once you've got some idea of what's important you want to show just
the interesting bits and not the rest.

: You've got to filter the gold from the grit

// ==========================================================================
## Traditional Unix tools

Start with simple tools

- grep
- cut
- less
- wc
- uniq
- sed

You can bolt these together in a pipeline to filter out the unwanted detail


// ==========================================================================
## Going further

Sometimes you need to do more than you can achieve with simple
tools.

You need to write a program.

: With a program you can
: - show just parts of lines under specific circumstances
: - do some arithmetic on the results
: - reformat things to make the results easier to understand

// ==========================================================================
## How big a program?

For the problem we've been describing you need small, very short-lived programs

: Micro-programs, just a few lines long

// ==========================================================================
## Writing micro-programs is easy...

in the **shell**

<br>

```
echo $((6*7))
```
// ==========================================================================
## Writing micro-programs is easy...

<br>

```
echo $((6*7))
```

or **python**

<br>

```
python3 -c 'print(6*7)'
```

// ==========================================================================
## Writing micro-programs is easy...

<br>

```
echo $((6*7))
python3 -c 'print(6*7)'
```
or **perl**

<br>

```
perl -e 'print(6*7,"\n")'
```

// ==========================================================================
## Writing micro-programs is easy...

<br>

```
echo $((6*7))
python3 -c 'print(6*7)'
perl -e 'print(6*7,"\n")'
```

But not in **Go**

// ==========================================================================
## In Go it's a lot more work

<br>

You can't do it in a single line

// ==========================================================================
## In Go it's a lot more work

<br>

You've got to generate a temporary file ...

<br>

```
t=$(tempfile -s .go)
```

: If you're using MacOS you'll need to install coreutils and use
:
: gmktemp --suffix .go

// ==========================================================================
## In Go it's a lot more work

<br>

```
t=$(tempfile -s .go)
```
<br>

then write your program into the temporary file ...

<br>

```
echo 'package main
import "fmt"
func main(){fmt.Println(6*7)}' > $t
```

: You need at least
: - a package statement,
: - an import statement
: - and a main function

// ==========================================================================
## In Go it's a lot more work

<br>

```
t=$(tempfile -s .go)
echo 'package main
import "fmt"
func main(){fmt.Println(6*7)}' > $t
```

<br>

then `go run` it ...

<br>

```
go run $t
```


// ==========================================================================
## In Go it's a lot more work

<br>

```
t=$(tempfile -s .go)
echo 'package main
import "fmt"
func main(){fmt.Println(6*7)}' > $t
go run $t
```

<br>

and lastly, tidy up afterwards.

<br>

```
rm $t
```


// ==========================================================================
## Problems with this solution

- **it's a lot of typing**


// ==========================================================================
## Problems with this solution

- it's a lot of typing
- **there are a lot of steps to remember**


// ==========================================================================
## Problems with this solution

- it's a lot of typing
- there are a lot of steps to remember
- **for packages not in the standard library, you need a directory & a go.mod file as well**


// ==========================================================================
## Given these problems

- **How small a Go program would you write?**

// ==========================================================================
## Given these problems

- How small a Go program would you write?
- **Would you switch to Go if you'd started writing something in another language?**


// ==========================================================================
## gosh to the rescue

.image _images/gosh.png


// ==========================================================================
## gosh to the rescue

With gosh you can write a micro-program in Go at the command line:

<br>

```
gosh -e 'fmt.Println(6*7)'
```

: the -e parameter introduces the code to execute
: a lot of Unix tools use this (it's sort of a standard)
:
: if you're more familiar with the python way -c does the same thing

// ==========================================================================
## gosh to the rescue

or, because we print things a lot:

<br>

```
gosh -pln '6*7'
```

: the -pln parameter generates code that wraps its argument
: in a call to fmt.Println
:
: similarly, -p calls fmt.Print
: and -pf calls fmt.Printf


// ==========================================================================
## installing gosh

<br>

```
go install github.com/nickwells/utilities/gosh@latest
```

// ==========================================================================
## Using gosh as a filter

Returning to the original problem, you can use gosh as a filter, reading from
its standard input.

<br>

```
gosh -n -e 'if len(_l.Text()) > 80 {' -pln '_l.Text()' -e '}'
```

: The -n parameter places the code in a loop.
: It reads each line into a bufio.Scanner
: either from STDIN or from listed files
:
: Note the use of the _l variable. Internal gosh variables all start with an underscore
:
: To see all the variables gosh might use:
: gosh -help-notes 'Gosh - var*'


// ==========================================================================
## Using gosh as a filter

When you are reading from a log file line-by-line you often want to
split the line into parts.
Gosh can do this automatically with the **split-line** (or **s**) parameter.

<br>

```
gosh -s -e 'if _lp[3] == "Target" {' -pln '_l.Text()' -e '}'
```

: The -s parameter automatically splits the line into parts.
: It splits on whitespace by default.
:
: Note that you don't need to give the -n parameter, it is assumed
: if you are splitting lines
:
: Note the use of the _l variable. Internal gosh variables all start
: with an underscore
:
: To see all the variables gosh might use:
: gosh -help-notes 'Gosh - var*'

// ==========================================================================
## gosh can help with other common tasks too

Examining values

```
gosh -e 'ctx := context.WithValue(context.Background(), "key", 42); pretty.Println(ctx)'
```

: Note that the 'pretty' package is not in the standard library
: It uses github.com/kr/pretty

// ==========================================================================
## gosh can help with other common tasks too

Quickly exploring Go library behaviour

<br>

```
gosh -e 'fmt.Printf("%+4.9X\n", 42)'
gosh -pf '"%+4.9X\n", 42'
gosh -pf '"%+9.4X\n", 42'
gosh -pf '"%+9.3X\n", 42'
gosh -pf '"%+9X\n", 42'
gosh -pf '"%+9x\n", 42'
gosh -pf '"%+9o\n", 42'
```

// ==========================================================================
## gosh can help with other common tasks too

Running a simple web-server with the **http** parameter

<br>

```
gosh -http -web-pf '"Gosh Time: %s", time.Now()'
```

: By default, this will listen on port 8080 but you can change this with the
: -http-port parameter

// ==========================================================================
## gosh can help with other common tasks too

Editing files in place with the **in-place-edit** (or **i**) parameter

<br>

```
gosh -in-place-edit \
     -sp '"' \
     -e 'if len(_lp) == 3 && _lp[0] != "import "{' \
     -w-p '_lp[0],`"` \
     -w-p 'strings.ToUpper(_lp[1])' \
     -w-pln '`"`, _lp[2]' \
     -e ' } else { ' \
     -w-pln '_l.Text()' \
     -e ' }' -- filename
```

You can use the **findCmpRm** command (from the same Repository
as gosh) to check the results.

: This will edit the file replacing it with the new text being
: written using the -w-p parameters.
:
: The -sp parameter sets a new split pattern. If you give this
: parameter you don't need to give the -s parameter; it is
: assumed.
:
: The original file is preserved in a copy with the same name
: plus a '.orig' suffix
:
: If the given file does not exist it will fail, similarly if
: there is already a .orig backup for the file

// ==========================================================================
## gosh as a shebang interpretter

.code _code/hello

: Note that Linux takes everything after the interpretter name as a single
: parameter and so only the -shebang parameter can be given on the shebang
: line
:
: Note the difficulties of having gosh installed in different locations
: on different OSs

// ==========================================================================
## Snippets

There are some bits of code that you write again and again.


// ==========================================================================
## Snippets

There are some bits of code that you write again and again.

<br>

```
if err != nil {
   fmt.Println(err)
   os.Exit(1)
}
```

// ==========================================================================
## Snippets

There are some bits of code that you write again and again.

<br>

```
if err != nil {
   fmt.Println(err)
   os.Exit(1)
}
```

With gosh you can replace this with

<br>

```
gosh -e '_, err := os.Open("nosuchfile")' -e-s iferr
```

// ==========================================================================
## Snippets - webserver timeout

If you don't want your webserver to run indefinitely you can use the abort
snippet to shut it down after a set length of time.

<br>

```
gosh -http -web-pf '"Gosh Time: %s", time.Now()' -g-s abort
```

: This will automatically exit the program after GOSH_TTL seconds

// ==========================================================================
## Snippets - listing what is available

You can see all the snippets available with the **snippet-list** parameter

<br>

```
gosh -snippet-list
```

// ==========================================================================
## Snippets - installing the standard snippets

There are several standard snippets provided with gosh.
These can be installed using the gosh.snippet command

// ==========================================================================
## Snippets - installing the standard snippets

There are several standard snippets provided with gosh.
These can be installed using the gosh.snippet command

You can install the gosh.snippet command as follows:

<br>

```
go install github.com/nickwells/utilities/gosh.snippet@latest
```
// ==========================================================================
## Snippets - installing the standard snippets

There are several standard snippets provided with gosh.
These can be installed using the gosh.snippet command
You can install the gosh.snippet command as follows:

<br>

```
go install github.com/nickwells/utilities/gosh.snippet@latest
```

To install the standard snippets, choose where to put them

<br>

```
gosh -snippet-list-dir
```

and then install them:

<br>

```
gosh.snippet -to <dir> -action install
```

: - gosh will search for snippets in a number of standard
:   directories and you can see what these are with
:   the snippet-list-dir parameter.
:
: - You can add to the list of directories to search with
:   the snippet-dir parameter

// ==========================================================================
## Snippets - more details

A snippet file is copied into the script but the comments it contains can be
meaningful. You can:

- describe what the snippet does and how to use it
- record which other snippets should be used with it and in what order
- populate the import statement

: gosh -help-note 'Gosh - snippet comments' will show you documentation for
: the various semantically meaningful snippet comments

// ==========================================================================
## What is gosh doing

You can see what gosh is doing using the **verbose** parameter

<br>

```
gosh -pln '"Hello, World!"' -verbose
```


// ==========================================================================
## Looking at the generated program

You can keep the generated program using the **keep** parameter

<br>

```
gosh -pln '"Hello, World!"' -keep
```

// ==========================================================================
## Getting help

<br>

```
gosh -help
gosh -help-all
gosh -help-full
gosh -help-short
gosh -help-show examples
gosh -help-show notes
```

: - gosh has a comprehensive user manual with notes and examples

// ==========================================================================
## Pros and cons of scripting

Pros:
- you just have the code you want to run
- none of the scaffolding (go.mod, go.sum, main.go, the directory and the executable)
- the ratio of "interesting" code to scaffolding is higher than in a standard program
- the code that will run is immediately visible in the place you run it
- you automatically run with the latest versions of packages and the language

// ==========================================================================
## Pros and cons of scripting

Cons:
- you have the same problems as with other scripting languages
- you need gosh itself installed
- you need Go installed
- you need goimports or gopls installed (there are ways around this)
- with a compiled binary you fix the behaviour; it won't change as packages change
- a compiled binary will execute faster

// ==========================================================================
## For more details

These slides are available at <https://github.com/nickwells/presentations/gosh>

You can read the speaker's notes on the slide deck

To install gosh

```
go install github.com/nickwells/utilities/gosh@latest
```

For the standard snippets

```
go install github.com/nickwells/utilities/gosh.snippet@latest
gosh.snippet -to $HOME/.config/github.com/nickwells/utilities/gosh/snippets -install
```

Some tips for using gosh can be found at
<https://nickwells.github.io/GoRecipes/gosh.html>


