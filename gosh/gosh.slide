# gosh
Go at the command line
10 Sep 2022

Nick Wells
@nickgwells
https://github.com/nickwells

// ==========================================================================
## Why write Go at the command line?

An example from real life

: a large system
:
: tens of programs;
: 1000+ instances;
: 100's of hosts in multiple datacentres;
: several million lines of code.
:
: ... and gigabytes of logs
:
: Sometimes we would need to answer questions about the system

// ==========================================================================
## Finding and investigating problems

You start out by scrolling through the log files

Once you've got some idea of what's important you want to show just
the interesting bits and not the rest.

: You've got to filter the gold from the grit

// ==========================================================================
## Traditional Unix tools

Start with simple tools

- grep
- cut
- less
- wc
- uniq
- sed

You can bolt these together in a pipeline to filter out the unwanted detail


// ==========================================================================
## Going further

Sometimes you need to do more than you can achieve with simple
tools. You need to write a program.

: With a program you can
: - show just parts of lines under specific circumstances
: - do some arithmetic on the results
: - reformat things to make the results easier to understand

// ==========================================================================
## How big a program?

For the problem we've been describing you need small, very short-lived programs

: Micro-programs, just a few lines long

// ==========================================================================
## Writing tiny programs is easy...

in the **shell**

```
$ echo $((6*7))
```
// ==========================================================================
## Writing tiny programs is easy...

```
$ echo $((6*7))
```

or **python**

```
$ python3 -c 'print(6*7)'
```

// ==========================================================================
## Writing tiny programs is easy...

```
$ echo $((6*7))
$ python3 -c 'print(6*7)'
```
or **perl**

```
$ perl -e 'print(6*7,"\n")'
```

// ==========================================================================
## Writing tiny programs is easy...

```
$ echo $((6*7))
$ python3 -c 'print(6*7)'
$ perl -e 'print(6*7,"\n")'
```

But not in **Go**

// ==========================================================================
## In Go it's a lot more work

You can't do it in a single line

// ==========================================================================
## In Go it's a lot more work

<br>

You've got to generate a temporary file ...

<br>

```
t=$(tempfile -s .go)
```

: If you're using MacOS you'll need to install coreutils and use
:
: gmktemp --suffix .go

// ==========================================================================
## In Go it's a lot more work

<br>

```
t=$(tempfile -s .go)
```
<br>

then write your program into the temporary file ...

<br>

```
echo 'package main
import "fmt"
func main(){fmt.Println(6*7)}' > $t
```

: You need at least
: - a package line,
: - an import statement
: - and a main function

// ==========================================================================
## In Go it's a lot more work

<br>


```
t=$(tempfile -s .go)
echo 'package main
import "fmt"
func main(){fmt.Println(6*7)}' > $t
```

<br>

then `go run` it ...

<br>

```
go run $t
```


// ==========================================================================
## In Go it's a lot more work

<br>

```
t=$(tempfile -s .go)
echo 'package main
import "fmt"
func main(){fmt.Println(6*7)}' > $t
go run $t
```

<br>

and lastly, tidy up afterwards.

<br>

```
rm $t
```


// ==========================================================================
## Problems with this solution

- **it's a lot of typing**


// ==========================================================================
## Problems with this solution

- it's a lot of typing
- **there are a lot of steps to remember**


// ==========================================================================
## Problems with this solution

- it's a lot of typing
- there are a lot of steps to remember
- **for packages not in the standard library, you need a directory & a go.mod file as well**


// ==========================================================================
## Given these problems

- **How small a Go program would you write?**

// ==========================================================================
## Given these problems

- How small a Go program would you write?
- **Would you switch to Go if you'd started writing something in another language?**



// ==========================================================================
## Gosh to the rescue

With gosh you can write a minimal Go program directly at the command line:

<br>

```
gosh -e 'fmt.Println(6*7)'
```

: the -e parameter introduces the code to execute
: a lot of Unix tools use this (it's sort of a standard)
:
: if you're more familiar with the python way -c does the same thing

// ==========================================================================
## Gosh to the rescue

or, because we print things a lot:

<br>


```
gosh -pln '6*7'
```

: the -pln parameter generates code that wraps its argument
: in a call to fmt.Println
:
: similarly, -p calls fmt.Print
: and -pf calls fmt.Printf

// ==========================================================================
## gosh can help with other common tasks too

Printing the lines in named files

```
gosh -n -pln '_l.Text()' -- file1 file2
gosh -n -e 'if len(_l.Text()) > 80 {' -pln '_l.Text()' -e '}' -- file1 file2
```

: The -n parameter places the code in a loop.
: It reads each line into a bufio.Scanner
: either from STDIN or, as here, from listed files
:
: Note the use of the _l variable. Internal gosh variables all start with an underscore
:
: To see all the variables gosh might use:
: gosh -help-notes 'Gosh - var*'

// ==========================================================================
## gosh can help with other common tasks too

Examining values

```
gosh -e 'ctx := context.WithValue(context.Background(), "key", 42); pretty.Print(ctx)'
```

: Note that the 'pretty' package is not in the standard library
: It uses github.com/kr/pretty

// ==========================================================================
## gosh can help with other common tasks too

Quickly exploring Go library behaviour

<br>

```
gosh -e 'fmt.Printf("%+4.9X\n", 42)'
gosh -pf '"%+4.9X\n", 42'
gosh -pf '"%+9.4X\n", 42'
gosh -pf '"%+9.3X\n", 42'
gosh -pf '"%+9X\n", 42'
gosh -pf '"%+9x\n", 42'
gosh -pf '"%+9o\n", 42'
```

// ==========================================================================
## gosh can help with other common tasks too

Running a simple web-server

<br>

```
gosh -http -web-pf '"Gosh Time: %s", time.Now()'
```

// ==========================================================================
## And lots more...

gosh can:
- automatically split lines into pieces
- can edit files in place
- can load in snippet files of pre-written code
- can run as a shebang interpretter


// ==========================================================================
## Getting help


<br>

```
gosh -help
gosh -help-all
gosh -help-full
```

: - gosh has a comprehensive user manual with notes and examples

// ==========================================================================
## Pros and cons of scripting

Pros:
- you just have the code you want to run
- none of the scaffolding (go.mod, go.sum, main.go, the directory and the executable)
- the ratio of "interesting" code to scaffolding is higher than in a standard program


// ==========================================================================
## Pros and cons of scripting

Cons:
- you have the same problem as with other scripting languages
- you need Go installed for your script to run
- you need goimports installed (there are ways around this)
- you need gosh itself installed


// ==========================================================================
## For more details

These slides are available at <https://github.com/nickwells/presentations/gosh>

You can read the speaker's notes on the slide deck

To install gosh

```
go install github.com/nickwells/utilities/gosh@latest
```

Some tips for using gosh can be found at <https://nickwells.github.io/GoRecipes/gosh.html>